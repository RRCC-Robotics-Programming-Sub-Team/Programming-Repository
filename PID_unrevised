// New code by jacob Mejia
//  information from:
//  https://ctms.engin.umich.edu/CTMS/index.php?example=Introduction&section=ControlPID


#include <iostream>

class PIDController {
public:
    // Constructor to initialize PID gains (kp, ki, kd), target value, integral term, and previous error

    //where Kp = proportional gain, Ki = integral gain, and Kd = derivative gain.


    PIDController(double kp, double ki, double kd, double target)
        : kp(kp), ki(ki), kd(kd), target(target), integral(0), prev_error(0) {}

    // Function to calculate control signal based on the measured value
    double calculate(double measured_value) {
        // Calculate the error between target and measured value
        double error = target - measured_value;
        // Update the integral term
        integral += error;
        // Calculate the derivative term
        double derivative = error - prev_error;
        // Update the previous error
        prev_error = error;
        // Calculate the control signal using PID formula
        double control_signal = kp * error + ki * integral + kd * derivative;
        // Return the control signal
        return control_signal;
    }

    // Function to set a new target value
    void setTarget(double target) {
        this->target = target;
    }

    // Function to reset integral and derivative terms
    void reset() {
        integral = 0;
        prev_error = 0;
    }

private:
    double kp, ki, kd; // Proportional, Integral, and Derivative gains
    double target; // Target value
    double integral; // Integral term
    double prev_error; // Previous error
};

int main() {
    // Create a PID controller object with specified gains and target
    PIDController controller(0.5, 0.1, 0.2, 100); // Example gains and target

    // Simulating control loop
    for (int i = 0; i < 10; ++i) {
        double measured_value = 90 + i * 5; // Simulated measured value
        double control_signal = controller.calculate(measured_value); // Calculate control signal
        std::cout << "Control Signal: " << control_signal << std::endl; // Output control signal
    }

    return 0;
}
